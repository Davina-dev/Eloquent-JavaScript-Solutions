                                                        // ü§ì Sesi√≥n 2: funciones üëæ //

//‚úåüèº M√≠nimo ***************** (Escribe una funci√≥n min que tome dos argumentos y retorne su m√≠nimo.)

function minNumber(a, b) {
  return Math.min(a, b);
}

console.log(minNumber(9, 3));


/*‚úåüèº Recursi√≥n***********************************
Hemos visto que % (el operador de residuo) se puede usar para probar si un n√∫mero es par o impar usando % 2 para ver si es divisible entre dos. Aqu√≠ hay otra manera de definir si un n√∫mero entero positivo es par o impar:

Zero es par.

Uno es impar.

Para cualquier otro n√∫mero N, su paridad es la misma que N - 2.

Define una funci√≥n recursiva esPar que corresponda a esta descripci√≥n. La funci√≥n debe aceptar un solo par√°metro (un n√∫mero entero, positivo) y devolver un Booleano.

Pru√©balo con 50 y 75. Observa c√≥mo se comporta con -1. Por qu√©? Puedes pensar en una forma de arreglar esto? */


//no es recursivo, no es lo que piden
function numberEven(nEntero) {
  let isEven = true;
  if (nEntero % 2 === 0) {
    console.log(isEven);
  } else {
    console.log(!isEven);
  }
}


function numEntero(n){
 
    let nPositivo = Math.trunc(n);
    console.log(nPositivo);
    let nEntero = Math.abs(nPositivo);
    console.log(`el n√∫m convertido es ${nEntero}. ¬øes numero  par?`); 
    numberEven(nEntero)
}


numEntero(-77);

//Recursivo


function esPar(n){   
  if(n===0){
    return true;
  };
  if(n===1){
    return false;
  } 
  return (esPar(n-= 2));
};


console.log(esPar(50))

/* ‚ùå Conteo de frijoles **************************
Puedes obtener el N-√©simo car√°cter, o letra, de un string escribiendo "string"[N]. El valor devuelto ser√° un string que contiene 
solo un car√°cter (por ejemplo, "f"). El primer car√°cter tiene posici√≥n cero, lo que hace que el √∫ltimo se encuentre en la posici√≥n 
string.length - 1. En otras palabras, un string de dos caracteres tiene una longitud de 2, y sus car√°cteres tendr√°n las posiciones 0 y 1.

Escribe una funci√≥n contarFs que tome un string como su √∫nico argumento y devuelva un n√∫mero que indica cu√°ntos caracteres ‚ÄúF‚Äù en may√∫sculas 
haya en el string.

Despues, escribe una funci√≥n llamada contarCaracteres que se comporte como contarFs, excepto que toma un segundo argumento que indica 
el car√°cter que debe ser contado (en lugar de contar solo caracteres ‚ÄúF‚Äù en may√∫scula). Reescribe contarFs para que haga uso de 
esta nueva funci√≥n. */


function contarFs(string){
 
  let caracter = [] ;

    for(i=0; i< string.length; i++){
      if(string[i] === 'K'){
        caracter.push('K');
      }
    }
    return caracter;
  }
  


console.log(contarFs("KjhFjhKKFF"));

//‚úåüèº ultimo caracter array: string.length - 1

function contarCaracteres(string, char){
 
  let conteo = 0 ;

    for(i=0; i< string.length; i++){
      if(string[i] === char){
        conteo++;
      }
    }
  return conteo;
}

console.log(contarCaracteres('davina','d'));


//‚ùå function contarCaracteres(palabra , caracter){};

