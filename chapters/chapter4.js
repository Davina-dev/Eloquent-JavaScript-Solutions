                                            //  ü§ì Estructuras de Datos: Objetos y Arrays üëæ//


/*‚úåüèº  ej1:La suma de un rango
- Escribe una funci√≥n rango que tome dos argumentos, inicio y final, y retorne un array que contenga todos los n√∫meros desde inicio hasta (e incluyendo) final.

Luego, escribe una funci√≥n suma que tome un array de n√∫meros y retorne la suma de estos n√∫meros. Ejecuta el programa de ejemplo y ve si realmente retorna 55.

Como una misi√≥n extra, modifica tu funci√≥n rango para tomar un tercer argumento opcional que indique el valor de ‚Äúpaso‚Äù utilizado para cuando 
construyas el array. Si no se da ning√∫n paso, los elementos suben en incrementos de uno, correspondiedo al comportamiento anterior.
 La llamada a la funci√≥n rango(1, 10, 2) deberia retornar [1, 3, 5, 7, 9]. Aseg√∫rate de que tambi√©n funcione con valores de pasos negativos 
 para que rango(5, 2, -1) produzca [5, 4, 3, 2].*/

function rango(inicio, fin, ordenDePaso = inicio <= fin ? 1 : -1) {
  let resultado = []

  for (
    let i = inicio;
    ordenDePaso >= 0 ? i <= fin : i >= fin;
    i += ordenDePaso
  ) {
    resultado.push(i)
  }
  return resultado
}

function suma(numeros) {
  resultadoSuma = 0
  for (let numero of numeros) {
    resultadoSuma += numero
  }
  return resultadoSuma
}

console.log(rango(5, 10))
// ‚Üí [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(rango(2, 10, 2))
// ‚Üí [1, 3, 5, 7, 9]
console.log(rango(5, 2, -1))
// ‚Üí [5, 4, 3, 2]
console.log(suma(rango(1, 10)))
// ‚Üí 55

/* ‚úåüèº ej Revirtiendo un array sin usar reverse
- Los arrays tienen un m√©todo reverse que cambia al array invirtiendo el orden en que aparecen sus elementos. Para este ejercicio, 
escribe dos funciones, revertirArray y revertirArrayEnSuLugar. El primero, revertirArray, toma un array como argumento y produce un 
nuevo array que tiene los mismos elementos pero en el orden inverso. El segundo, revertirArrayEnSuLugar, hace lo que hace 
el m√©todoreverse: modifica el array dado como argumento invirtiendo sus elementos. Ninguno de los dos puede usar el m√©todo reverse est√°ndar.

Pensando en las notas acerca de los efectos secundarios y las funciones puras en el cap√≠tulo anterior, qu√© variante esperas 
que sea √∫til en m√°s situaciones? Cu√°l corre m√°s r√°pido? */

function revertirArray(array) {
  resultado = []
  for (let item of array) {
    resultado.unshift(item)
  }
  return resultado
}

function revertirArrayEnSuLugar(array) {
  let lengthArray = array.length
  for (let i = 0; i < Math.floor(lengthArray / 2); i++) {
    console.log(
      i,
      lengthArray - i - 1,
      array[i],
      array[lengthArray - i - 1],
      array,
    )
    let intercambio = array[i]
    array[i] = array[lengthArray - i - 1]
    array[lengthArray - i - 1] = intercambio
  }
  return array
}

console.log(revertirArray(['A', 'B', 'C']))
// ‚Üí ["C", "B", "A"];
let valorArray = [1, 2, 3, 4, 5]

revertirArrayEnSuLugar(valorArray) //?
console.log(valorArray) //?
// ‚Üí [5, 4, 3, 2, 1]



/*‚ùå Una lista
Los objetos, como conjuntos gen√©ricos de valores, se pueden usar para construir todo tipo de estructuras de datos. 
Una estructura de datos com√∫n es la lista (no confundir con un array). Una lista es un conjunto anidado de objetos, 
con el primer objeto conteniendo una referencia al segundo, el segundo al tercero, y as√≠ sucesivamente.

let lista = {
  valor: 1,
  resto: {
    valor: 2,
    resto: {
      valor: 3,
      resto: null
    }
  }
};
Los objetos resultantes forman una cadena, como esta:

Una lista vinculada
Algo bueno de las listas es que pueden compartir partes de su estructura. Por ejemplo, si creo dos 
nuevos valores {valor: 0, resto: lista} y {valor: -1, resto: lista} (con lista refiri√©ndose a la vinculaci√≥n definida anteriormente),
 ambos son listas independientes, pero comparten la estructura que conforma sus √∫ltimos tres elementos. La lista original tambi√©n sigue
  siendo una lista v√°lida de tres elementos.

Escribe una funci√≥n arrayALista que construya una estructura de lista como el que se muestra arriba cuando se le da [1, 2, 3] como argumento.
 Tambi√©n escribe una funci√≥n listaAArray que produzca un array de una lista. Luego agrega una funci√≥n de utilidad preceder, que tome un elemento 
 y una lista y cre√© una nueva lista que agrega el elemento al frente de la lista de entrada, y posicion, que toma una lista y un n√∫mero y 
 retorne el elemento en la posici√≥n dada en la lista (con cero refiri√©ndose al primer elemento) o undefined cuando no exista tal elemento.

Si a√∫n no lo has hecho, tambi√©n escribe una versi√≥n recursiva de posicion.

*/








/*‚ùå Comparaci√≥n profunda
El operador == compara objetos por identidad. Pero a veces preferirias comparar los valores de sus propiedades reales.

Escribe una funci√≥n igualdadProfunda que toma dos valores y retorne true solo si tienen el mismo valor o son objetos con
 las mismas propiedades, donde los valores de las propiedades sean iguales cuando comparadas con una llamada recursiva a igualdadProfunda.

Para saber si los valores deben ser comparados directamente (usa el operador == para eso) o si deben tener sus propiedades 
comparadas, puedes usar el operador typeof. Si produce "object" para ambos valores, deber√≠as hacer una comparaci√≥n profunda.
 Pero tienes que tomar una excepci√≥n tonta en cuenta: debido a un accidente hist√≥rico, typeof null tambi√©n produce "object".

La funci√≥n Object.keys ser√° √∫til para cuando necesites revisar las propiedades de los objetos para compararlos. */
console.log("igualdad profunda:");

function igualdadProfunda(a, b) {
  if (a === b) {
    return true
  } else if (
    typeof a === 'object' &&
    a !== null &&
    typeof b === 'object' &&
    b !== null
  ) {
    //typeof null tambi√©n produce "object"
    let keys = Object.keys(a).concat(Object.keys(b)) //Object.keys-> √∫til para revisar las propiedades de los objetos para compararlos.
    console.log(keys)
  }
}

console.log(igualdadProfunda(object, object))
